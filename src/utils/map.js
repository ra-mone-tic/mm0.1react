import maplibregl from 'maplibre-gl';
import { getEventDateLabel, extractTimeFromText, getTimeAgoText } from './time.js';
import { CACHE_URL, JSON_URL } from '../config.js';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∞ –≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
let geocodeCache = {};
let cacheLoaded = false;

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞—Å–∞
export class CustomNavigationControl {
  onAdd(map) {
    this._map = map;
    this._container = document.createElement('div');
    this._container.className = 'maplibregl-ctrl maplibregl-ctrl-group';

    // –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
    const zoomInButton = this._createButton('zoom-in', '–£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±', () => {
      this._map.zoomIn();
    });

    // –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
    const zoomOutButton = this._createButton('zoom-out', '–£–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—à—Ç–∞–±', () => {
      this._map.zoomOut();
    });

    this._container.appendChild(zoomInButton);
    this._container.appendChild(zoomOutButton);

    return this._container;
  }

  onRemove() {
    if (this._container && this._container.parentNode) {
      this._container.parentNode.removeChild(this._container);
    }
    this._map = undefined;
  }

  _createButton(className, title, fn) {
    const button = document.createElement('button');
    button.className = `maplibregl-ctrl-${className}`;
    button.type = 'button';
    button.title = title;
    button.setAttribute('aria-label', title);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º
    if (className === 'zoom-in') {
      button.innerHTML = '<span style="font-size: 18px; line-height: 1; font-weight: bold;">+</span>';
    } else if (className === 'zoom-out') {
      button.innerHTML = '<span style="font-size: 18px; line-height: 1; font-weight: bold;">‚àí</span>';
    }

    button.addEventListener('click', fn);

    return button;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
export function loadGeocodeCache() {
  return fetch(CACHE_URL)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      return response.json();
    })
    .then(cache => {
      geocodeCache = cache;
      cacheLoaded = true;
      console.log(`–ö—ç—à –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${Object.keys(cache).length} –∞–¥—Ä–µ—Å–æ–≤`);
      return cache;
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
      geocodeCache = {};
      cacheLoaded = true;
      return {};
    });
}

export function getCoordinatesFromCache(location) {
  if (!cacheLoaded || !location) return null;

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
  const normalizedLocation = location.trim();

  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (geocodeCache[normalizedLocation]) {
    return geocodeCache[normalizedLocation];
  }

  // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –∞–¥—Ä–µ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥)
  for (const [cachedLocation, coordinates] of Object.entries(geocodeCache)) {
    if (normalizedLocation.includes(cachedLocation) || cachedLocation.includes(normalizedLocation)) {
      return coordinates;
    }
  }

  return null;
}

export function updateEventCoordinates(event) {
  // –ï—Å–ª–∏ —É —Å–æ–±—ã—Ç–∏—è —É–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (event.lat && event.lon) {
    return event;
  }

  // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫—ç—à–µ
  const coordinates = getCoordinatesFromCache(event.location);
  if (coordinates) {
    event.lat = coordinates[0];
    event.lon = coordinates[1];
    console.log(`–ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è "${event.location}": [${coordinates[0]}, ${coordinates[1]}]`);
  } else {
    console.warn(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è "${event.location}"`);
  }

  return event;
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID —Å–æ–±—ã—Ç–∏—è
export function makeEventId(event) {
  const source = `${event.date}|${event.title}|${event.lat}|${event.lon}`;
  let hash = 5381;
  for (let i = 0; i < source.length; i += 1) {
    hash = ((hash << 5) + hash) + source.charCodeAt(i);
  }
  return `e${(hash >>> 0).toString(16)}`;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ–π –∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
let popupStates = new Map();
let markers = [];
let markerById = new Map();

export function clearMarkers() {
  markers.forEach(marker => marker.remove());
  markers.length = 0;
  markerById.clear();
  popupStates.clear();
}

function formatLocation(location) {
  if (!location) return '';
  return location.replace(/,?\s*–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥\s*$/i, '');
}

export function popupTemplate(event) {
  const shareButton = `
    <button class="share-btn" type="button" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" onclick="window.copyShareLink('${event.id}')" style="position:absolute;right:16px;bottom:8px;border:var(--border);background:var(--surface-2);border-radius:var(--radius-xs);padding:4px 6px;cursor:pointer;font-size:14px;line-height:1;color:var(--text-0);z-index:10;">
      üîó
    </button>`;

  // –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–±–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤, –¥–∞—Ç—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
  let postText = event.text || '';
  postText = postText.replace(/#[^\s#]+/g, '').trim();
  postText = postText.replace(/^.*\n/, '').trim();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 90 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ
  const COLLAPSED_LIMIT = 90;
  const isLong = postText.length > COLLAPSED_LIMIT;
  const shortText = isLong ? postText.slice(0, COLLAPSED_LIMIT) : postText;

  // –ù–æ–≤–∞—è —Ä—É—á–∫–∞ - —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ª–æ—Å–∫–∞ –≤–Ω–∏–∑—É
  const handle = isLong ? '<div class="popup-handle" style="position:absolute;bottom:0;left:0;right:0;height:8px;cursor:pointer;z-index:5;display:flex;align-items:center;justify-content:center;"><div style="width:46px;height:5px;border-radius:999px;background:color-mix(in srgb, var(--text-1) 25%, transparent);"></div></div>' : '';

  return `
    <div style="position:relative;padding:8px 8px 28px 8px;min-width:220px;max-width:320px;">
      <div><strong>${event.title}</strong></div>
      <div>${formatLocation(event.location)}</div>
      <div style="color:var(--text-1);">${getEventDateLabel(event.date, event.text)}</div>
      <div class="popup-text" style="margin:8px 0 0 0;max-height:72px;overflow:hidden;position:relative;">
        <span class="popup-text-short">${shortText}${isLong ? '‚Ä¶' : ''}</span>
      </div>
      <div class="popup-text-full" style="display:none;max-height:160px;overflow:auto;margin:8px 0 0 0;">${postText.replace(/\n/g, '<br>')}</div>
      ${handle}
      ${shareButton}
    </div>
  `;
}

export function addMarker(event, onSelectEvent, map) {
  // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º window.currentMap
  const targetMap = map || window.currentMap || window.mapInstance;
  if (!targetMap) {
    console.warn('–ö–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è addMarker');
    return;
  }

  // –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  if (!event.lat || !event.lon) {
    console.warn('–£ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', event);
    return;
  }

  console.log('–î–æ–±–∞–≤–ª—è—é –º–∞—Ä–∫–µ—Ä –¥–ª—è:', event.title, [event.lon, event.lat]);

  const popup = new maplibregl.Popup({ offset: 24, closeButton: false }).setHTML(popupTemplate(event));
  const marker = new maplibregl.Marker().setLngLat([event.lon, event.lat]).setPopup(popup).addTo(targetMap);
  markers.push(marker);
  if (event.id) {
    markerById.set(event.id, marker);
  }

  let popupState = { expanded: false };

  // popup expand/collapse logic –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
  function toggleText(popupEl) {
    const shortText = popupEl.querySelector('.popup-text-short');
    const fullText = popupEl.querySelector('.popup-text-full');
    const handle = popupEl.querySelector('.popup-handle');

    if (!shortText || !fullText) return;

    if (popupState.expanded) {
      // –°–≤–µ—Ä–Ω—É—Ç—å
      shortText.style.display = 'inline';
      fullText.style.display = 'none';
      popupState.expanded = false;
    } else {
      // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å
      shortText.style.display = 'none';
      fullText.style.display = 'block';
      popupState.expanded = true;
    }
  }

  popup.on('open', () => {
    const popupEl = popup.getElement();
    if (!popupEl) return;

    const handle = popupEl.querySelector('.popup-handle');
    if (handle) {
      handle.onclick = () => toggleText(popupEl);
    }
  });

  popup.on('close', () => {
    const popupEl = popup.getElement();
    if (!popupEl) return;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    const shortText = popupEl.querySelector('.popup-text-short');
    const fullText = popupEl.querySelector('.popup-text-full');
    if (shortText && fullText) {
      shortText.style.display = 'inline';
      fullText.style.display = 'none';
      popupState.expanded = false;
    }
  });

  // –ö–ª–∏–∫ –º–∞—Ä–∫–µ—Ä–∞
  marker.getElement().addEventListener('click', () => {
    if (onSelectEvent) {
      onSelectEvent(event);
    }
  });

  return marker;
}

export function renderDay(dateStr, allEvents, recenter = true) {
  if (!dateStr || !allEvents.length) {
    clearMarkers();
    return [];
  }

  clearMarkers();
  const todays = allEvents.filter(event => event.date === dateStr);
  todays.forEach(event => addMarker(event, () => {})); // –ü—É—Å—Ç–æ–π callback, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–∑–∂–µ

  // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ flyTo –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
  return todays;
}

export function highlightMarker(eventId) {
  // –ù–∞–π—Ç–∏ –º–∞—Ä–∫–µ—Ä –∏ –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø
  const marker = markerById.get(eventId);
  if (marker) {
    marker.togglePopup();
    return true;
  }
  return false;
}
