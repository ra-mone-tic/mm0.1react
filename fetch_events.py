# Python 3.10+
"""
MeowAfisha ¬∑ fetch_events.py
–ö–∞—Å–∫–∞–¥–Ω—ã–π –≥–µ–æ–∫–æ–¥–∏–Ω–≥: ArcGIS ‚Üí Yandex ‚Üí Nominatim
- –ö—ç—à: geocode_cache.json (–∫–æ–º–º–∏—Ç–∏–º ‚Äî —ç–∫–æ–Ω–æ–º–∏—Ç –ª–∏–º–∏—Ç—ã)
- –õ–æ–≥–∏: –ø–µ—á–∞—Ç—å –≤ stdout + (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) geocode_log.json –ø—Ä–∏ GEOCODE_SAVE_LOG=1
- –†–µ–π—Ç-–ª–∏–º–∏—Ç—ã: min_delay_seconds –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (env)
"""

import os, re, time, json, sys
from pathlib import Path

# ‚îÄ‚îÄ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
try:
    from dotenv import load_dotenv  # pip install python-dotenv
    load_dotenv()
except Exception:
    pass

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import pandas as pd
from geopy.geocoders import ArcGIS, Yandex, Nominatim
from geopy.extra.rate_limiter import RateLimiter

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN        = os.getenv("VK_TOKEN")                       # ‚¨ÖÔ∏è —Å–µ–∫—Ä–µ—Ç VK (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
DOMAIN       = os.getenv("VK_DOMAIN", "meowafisha")        # –ø–∞–±–ª–∏–∫ –í–ö
MAX_POSTS    = int(os.getenv("VK_MAX_POSTS", "2000"))
BATCH        = 100
WAIT_REQ     = float(os.getenv("VK_WAIT_REQ", "1.1"))      # –ø–∞—É–∑–∞ –º–µ–∂–¥—É wall.get (~1 rps)
YEAR_DEFAULT = os.getenv("YEAR_DEFAULT", "2025")

# –ì–µ–æ–∫–æ–¥–µ—Ä—ã: –∑–∞–¥–µ—Ä–∂–∫–∏ (—Å–µ–∫) –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
ARCGIS_MIN_DELAY    = float(os.getenv("ARCGIS_MIN_DELAY", "1.0"))
YANDEX_MIN_DELAY    = float(os.getenv("YANDEX_MIN_DELAY", "1.0"))
NOMINATIM_MIN_DELAY = float(os.getenv("NOMINATIM_MIN_DELAY", "1.0"))

# Yandex / Nominatim –∫–ª—é—á–∏/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
YANDEX_KEY = os.getenv("YANDEX_KEY")  # ‚¨ÖÔ∏è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –Ø–Ω–¥–µ–∫—Å–∞
NOMINATIM_USER_AGENT = os.getenv("NOMINATIM_USER_AGENT", "meowafisha-bot")
# –µ—Å–ª–∏ –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –±—É–¥–µ—Ç —Å–≤–æ–π Nominatim: NOMINATIM_URL="nominatim.example.com"
NOMINATIM_URL = os.getenv("NOMINATIM_URL", "").strip()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª (–∫—Ä–æ–º–µ stdout)
GEOCODE_SAVE_LOG = os.getenv("GEOCODE_SAVE_LOG", "1") == "1"

OUTPUT_JSON  = Path("events.json")           # –æ—Ç—Å—é–¥–∞ —á–∏—Ç–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç
CACHE_FILE   = Path("geocode_cache.json")    # –∫–æ–º–º–∏—Ç–∏–º ‚Äî —ç–∫–æ–Ω–æ–º–∏—Ç –ª–∏–º–∏—Ç—ã
LOG_FILE     = Path("geocode_log.json")      # –≤ .gitignore

assert TOKEN, "VK_TOKEN –Ω–µ –∑–∞–¥–∞–Ω (—Å–µ–∫—Ä–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–ª–∏ .env)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
vk_url = "https://api.vk.ru/method/wall.get"

def init_session() -> requests.Session:
    """Create a requests session with retry logic."""
    sess = requests.Session()
    retry = Retry(
        total=3,
        backoff_factor=0.5,
        status_forcelist=[500, 502, 503, 504],
        allowed_methods=["GET"],
    )
    adapter = HTTPAdapter(max_retries=retry)
    sess.mount("https://", adapter)
    sess.mount("http://", adapter)
    return sess


session = init_session()


# –ì–µ–æ–∫–æ–¥–µ—Ä—ã
arcgis = ArcGIS(timeout=10)  # –ø—É–±–ª–∏—á–Ω—ã–π ArcGIS, –±–µ–∑ –∫–ª—é—á–∞
# –Ø–Ω–¥–µ–∫—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á—ë–Ω, –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞
yandex = Yandex(api_key=YANDEX_KEY, timeout=10, user_agent="meowafisha-script") if YANDEX_KEY else None

# Nominatim: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É–±–ª–∏—á–Ω—ã–π; –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–π ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º domain
if NOMINATIM_URL:
    nominatim = Nominatim(user_agent=NOMINATIM_USER_AGENT, timeout=10, domain=NOMINATIM_URL)
else:
    nominatim = Nominatim(user_agent=NOMINATIM_USER_AGENT, timeout=10)

# –†–µ–π—Ç-–ª–∏–º–∏—Ç–µ—Ä—ã (–±–µ—Ä–µ–∂–Ω–æ –ø–æ 1 req/s –Ω–∞ —Å–µ—Ä–≤–∏—Å)
arcgis_geocode    = RateLimiter(arcgis.geocode, min_delay_seconds=ARCGIS_MIN_DELAY)
yandex_geocode    = RateLimiter(yandex.geocode, min_delay_seconds=YANDEX_MIN_DELAY) if yandex else None
nominatim_geocode = RateLimiter(nominatim.geocode, min_delay_seconds=NOMINATIM_MIN_DELAY)

# —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –∏—Ö —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤)
GEOCODERS = [
    {"name": "ArcGIS", "func": arcgis_geocode},
    {"name": "Yandex", "func": yandex_geocode},
    {"name": "Nominatim", "func": nominatim_geocode},
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–≠–® ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_cache() -> dict:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞.

    –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å,
    —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å—ã –∫ API –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    if CACHE_FILE.exists():
        try:
            return json.loads(CACHE_FILE.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}


def save_cache(cache: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—ç—à –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞ –Ω–∞ –¥–∏—Å–∫."""
    CACHE_FILE.write_text(
        json.dumps(cache, ensure_ascii=False, indent=2),
        encoding="utf-8",
    )


def save_cache_if_changed(cache: dict, original_cache: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è."""
    if cache != original_cache:
        CACHE_FILE.write_text(
            json.dumps(cache, ensure_ascii=False, indent=2),
            encoding="utf-8",
        )
        print(f"üíæ –ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω ({len(cache)} –∑–∞–ø–∏—Å–µ–π)")
    else:
        print("üíæ –ö—ç—à –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")


# –ö—ç—à –∞–¥—Ä–µ—Å‚Üí[lat, lon]
geocache = load_cache()
original_cache = geocache.copy()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

geolog = {}  # –∞–¥—Ä–µ—Å ‚Üí {'arcgis':..., 'yandex':..., 'nominatim':...}

def vk_wall(offset: int, attempts: int = 3):
    params = dict(domain=DOMAIN, offset=offset, count=BATCH,
                  access_token=TOKEN, v="5.199")
    for attempt in range(1, attempts + 1):
        try:
            r = session.get(vk_url, params=params, timeout=20)
            r.raise_for_status()
            data = r.json()
            if "error" in data:
                raise RuntimeError(f"VK API error: {data['error']}")
            return data["response"]["items"]
        except Exception as e:
            if attempt == attempts:
                raise
            time.sleep(WAIT_REQ)

CITY_WORDS = r"(–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥|–≥—É—Ä—å–µ–≤—Å–∫|—Å–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫|—è–Ω—Ç–∞—Ä–Ω—ã–π|–∑–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫|–ø–∏–æ–Ω–µ—Ä—Å–∫–∏–π|–±–∞–ª—Ç–∏–π—Å–∫|–ø–æ—Å–µ–ª–æ–∫|–ø–æ—Å\.|–≥\.)"

def extract(text: str):
    # –¥–∞—Ç–∞ –î–î.–ú–ú
    m_date = re.search(r"\b(\d{2})\.(\d{2})\b", text)
    # –ª–æ–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ üìç
    m_loc  = re.search(r"üìç\s*(.+)", text)
    if not (m_date and m_loc):
        return None

    date  = f"{YEAR_DEFAULT}-{m_date.group(2)}-{m_date.group(1)}"
    loc   = m_loc.group(1).split('‚û°Ô∏è')[0].strip()
    if not re.search(CITY_WORDS, loc, re.I):
        loc += ", –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ = –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ "–î–î.–ú–ú |"
    first_line = text.split('\n', 1)[0]
    title = re.sub(r"^\s*\d{2}\.\d{2}\s*\|\s*", "", first_line).strip()

    return dict(title=title, date=date, location=loc, text=text)

def _log(addr: str, provider: str, ok: bool, detail: str = ""):
    print(f"[{provider:9}] {'OK ' if ok else 'N/A'} | {addr} {('‚Üí ' + detail) if detail else ''}")
    if addr not in geolog:
        geolog[addr] = {}
    geolog[addr][provider] = {"ok": ok, "detail": detail}

def geocode_addr(addr: str):
    """–ö–∞—Å–∫–∞–¥–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: ArcGIS ‚Üí Yandex ‚Üí Nominatim.
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [lat, lon] –∏–ª–∏ [None, None]. –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏—à–µ–º –≤ –∫—ç—à.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ –Ω–∞—á–∞–ª–µ
    if addr in geocache:
        cached_coords = geocache[addr]
        if cached_coords != [None, None]:  # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ
            print(f"[CACHE    ] HIT | {addr} ‚Üí {cached_coords[0]:.6f},{cached_coords[1]:.6f}")
            return cached_coords

    # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã None - –¥–µ–ª–∞–µ–º –≥–µ–æ–∫–æ–¥–∏–Ω–≥
    for provider in GEOCODERS:
        name, func = provider["name"], provider["func"]
        if not func:
            detail = "–Ω–µ—Ç –∫–ª—é—á–∞" if name == "Yandex" else ""
            _log(addr, name, False, detail)
            continue
        try:
            loc = func(addr)
            if loc:
                res = [loc.latitude, loc.longitude]
                geocache[addr] = res
                _log(addr, name, True, f"{res[0]:.6f},{res[1]:.6f}")
                return res
            _log(addr, name, False)
        except Exception as e:
            _log(addr, name, False, f"err: {e}")

    geocache[addr] = [None, None]
    return geocache[addr]

def main():
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–ë–û–† –ü–û–°–¢–û–í ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    records, off = [], 0
    while off < MAX_POSTS:
        items = vk_wall(off)
        if not items:
            break
        for it in items:
            text = it.get("text") or ""
            evt = extract(text)
            if evt:
                records.append(evt)
        off += BATCH
        time.sleep(WAIT_REQ)

    print("–ê–Ω–æ–Ω—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:", len(records))
    if not records:
        OUTPUT_JSON.write_text("[]", encoding="utf-8")
        sys.exit(0)

    df = pd.DataFrame(records).drop_duplicates()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–ï–û–ö–û–î–ò–ù–ì ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    lats, lons = [], []
    for addr in df["location"]:
        lat, lon = geocode_addr(addr)
        lats.append(lat); lons.append(lon)

    df["lat"] = lats; df["lon"] = lons

    bad = df[df["lat"].isna()]
    bad_cnt = int(bad.shape[0])
    if bad_cnt:
        missed = ", ".join(sorted(set(map(str, bad["location"].tolist()))))
        print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {bad_cnt} –∞–¥—Ä–µ—Å(–æ–≤): {missed[:800]}{' ‚Ä¶' if len(missed)>800 else ''}")

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—á–∫–∏ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –æ—Ç–¥–∞—á–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç
    df = df.dropna(subset=["lat", "lon"])

    print(f"–° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(df)} | –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {bad_cnt}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–û–•–†–ê–ù–ï–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    df = df[["title","date","location","lat","lon","text"]].sort_values("date")
    OUTPUT_JSON.write_text(
        df.to_json(orient="records", force_ascii=False, indent=2),
        encoding="utf-8"
    )

    # –∫—ç—à —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî —ç–∫–æ–Ω–æ–º–∏—Ç I/O
    save_cache_if_changed(geocache, original_cache)

    if GEOCODE_SAVE_LOG:
        try:
            LOG_FILE.write_text(json.dumps(geolog, ensure_ascii=False, indent=2), encoding="utf-8")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {LOG_FILE}: {e}")

    print("‚úÖ  events.json —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω")
    session.close()


if __name__ == "__main__":
    main()
